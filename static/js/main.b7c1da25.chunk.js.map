{"version":3,"sources":["MyContext.js","GrandchildComponent.js","ChildComponent.js","App.js","index.js"],"names":["MyContext","React","createContext","count","GrandchildComponent","Consumer","context","onClick","state","Component","ChildComponent","this","contextType","App","setCount","num","console","log","result","setState","Provider","value","className","ReactDOM","render","document","getElementById"],"mappings":"2PAUeA,G,MAJGC,IAAMC,cAAc,CACrCC,MAAO,KCaOC,E,iLAfb,OAEC,kBAAC,EAAUC,SAAX,MACE,SAAAC,GAAO,OACP,6BACC,kDACA,4BAAQC,QAASD,EAAQH,OAAzB,aAFD,sCAGuBG,EAAQE,MAAML,MAHrC,Y,GAN6BF,IAAMQ,WCElCC,E,iLAMJ,OACC,6BACC,8CACA,4BAAQH,QAASI,KAAKL,QAAQH,OAA9B,aAFD,iCAGkBQ,KAAKL,QAAQE,MAAML,MAHrC,IAIC,6BACA,kBAAC,EAAD,W,GAZyBF,IAAMQ,WAA7BC,EAGEE,YAAcZ,EAePU,QCgFAG,E,2MA1FdL,MAAQ,CACPL,MAAO,G,EAKRW,SAAW,SAAAC,GACVC,QAAQC,IAAI,0BAA2B,EAAKT,MAAML,OAGlDa,QAAQC,IAAI,sBAAuBF,GAEnC,IAAIG,EAAS,EAAKV,MAAML,MAAQY,EAChC,EAAKI,SAAS,CAAEhB,MAAOe,K,wEA4Cd,IAAD,OACR,OAEC,kBAAC,EAAUE,SAAX,CACCC,MAAO,CACNb,MAAOG,KAAKH,MACZL,MAAO,kBACN,EAAKgB,SAAS,CACbhB,MAAO,EAAKK,MAAML,MAAQ,OAI7B,0BAAMmB,UAAU,OACf,iDAEC,6BAFD,yBAKA,uDACA,4BACC,8DACA,uFACA,oFAGD,wDAA8BX,KAAKH,MAAML,OACzC,kBAAC,EAAD,Y,GAzFaF,IAAMQ,W,MCFxBc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b7c1da25.chunk.js","sourcesContent":["import React from 'react';\n\n// use context to create global variables and functions\n// that can be shared with all components\n\n// create a context object\nconst MyContext = React.createContext({\n\tcount: 0\n});\n\nexport default MyContext;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nclass GrandchildComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t// if you don't want to use static you can wrap the child component in MyContext.Consumer:\n\t\t\t<MyContext.Consumer>\n\t\t\t\t{context => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>GrandhildComponent</h2>\n\t\t\t\t\t\t<button onClick={context.count}>Count + 1</button> See Count in\n\t\t\t\t\t\tGrandchildComponent ({context.state.count})\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</MyContext.Consumer>\n\t\t);\n\t}\n}\n\nexport default GrandchildComponent;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nimport GrandchildComponent from './GrandchildComponent';\n\nclass ChildComponent extends React.Component {\n\t// using static, allows you to do this.context... further down\n\t// ex. this.context.count\n\tstatic contextType = MyContext;\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>ChildComponent</h2>\n\t\t\t\t<button onClick={this.context.count}>Count + 1</button> See Count in\n\t\t\t\tChildComponent ({this.context.state.count})\n\t\t\t\t<br />\n\t\t\t\t<GrandchildComponent />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ChildComponent;\n","import React from 'react';\nimport './App.css';\n\nimport MyContext from './MyContext';\n\nimport ChildComponent from './ChildComponent';\n\nclass App extends React.Component {\n\t// in this example, App = my Provider - where I define state\n\t// Provider = holds and provides state\n\n\t// setting default state 'count' variable value\n\t// setCount is the updater function to change the state 'count' variable value\n\tstate = {\n\t\tcount: 0\n\t};\n\n\t// QUESTION:\n\t// NOTE setCount is NOT used/needed\n\tsetCount = num => {\n\t\tconsole.log('APP this.state.count = ', this.state.count);\n\n\t\t// QUESTION - why is NUM always 1???\n\t\tconsole.log('APP setCount num = ', num);\n\n\t\tlet result = this.state.count + num;\n\t\tthis.setState({ count: result });\n\n\t\t// this.setState(prevState => {\n\t\t// \treturn { count: prevState.count + 1 };\n\t\t// });\n\t};\n\n\t/*\n\tfrom https://reactjs.org/docs/context.html:\n\n\t\tContext.Provider\n\n\t\t Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes\n\n\t\t Accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n\n\t\t All consumers that are descendants of a Provider will re-render whenever the Providerâ€™s value prop changes. The propagation from Provider to its descendant consumers is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component bails out of the update.\n\t\t*/\n\n\t// create a component state object to update the values stored in MyContext\n\t// pass in any variables and functions you want access to in child components (aka Consumers)\n\t// pass in both the state variables AND the functions which change them\n\n\t/*\n\t // QUESTION: WHY CAN NOT create a separate object and pass as <MyContext.Provider value={componentStateObj}>, because want to update state???\n\n\t// This was my 1st attempt, which did NOT work:\n\tcomponentStateObj = {\n\t\tcount: this.state.count,\n\t\tsetCount: this.setCount\n\t};\n\n\t// Neither did this:\n\tcomponentStateObj = {\n\t\tstate: this.state,\n\t\tcount: () =>\n\t\t\tthis.setState({\n\t\t\t\tcount: this.state.count + 1\n\t\t\t})\n\t};\n\n\t// QUESTION: why does it NOT matter if anything is inside MyContext? And why don't you need to put anything inside MyContext to refer to state?\n\t*/\n\n\trender() {\n\t\treturn (\n\t\t\t// use Provider to pass this component state as a context value down to the entire component tree\n\t\t\t<MyContext.Provider\n\t\t\t\tvalue={{\n\t\t\t\t\tstate: this.state,\n\t\t\t\t\tcount: () =>\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tcount: this.state.count + 1\n\t\t\t\t\t\t})\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<main className=\"App\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tReact Context Demo\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\twith Class Components\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p>To use context you need:</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>a state object (in a provider)</li>\n\t\t\t\t\t\t<li>a way to change your state object from your consumer(s)</li>\n\t\t\t\t\t\t<li>a way to communicate state changes to your provider</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<div>The count (in state) is {this.state.count}</div>\n\t\t\t\t\t<ChildComponent />\n\t\t\t\t</main>\n\t\t\t</MyContext.Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}