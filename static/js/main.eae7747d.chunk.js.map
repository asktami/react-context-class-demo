{"version":3,"sources":["MyContext.js","GrandchildComponent.js","ChildComponent.js","App.js","index.js"],"names":["MyContext","React","createContext","GrandchildComponent","Consumer","context","onClick","setCount","count","Component","ChildComponent","this","contextType","App","state","num","setState","prevState","props","componentStateObj","Provider","value","className","ReactDOM","render","document","getElementById"],"mappings":"kQAgBeA,G,MARGC,IAAMC,cAAc,KCYvBC,E,iLAfb,OAEC,kBAAC,EAAUC,SAAX,MACE,SAAAC,GAAO,OACP,6BACC,kDACA,4BAAQC,QAAS,kBAAMD,EAAQE,SAAS,KAAxC,aAFD,sCAGgCF,EAAQG,MAHxC,Y,GAN6BP,IAAMQ,WCElCC,E,iLAKK,IAAD,OACR,OACC,6BACC,8CACA,4BAAQJ,QAAS,kBAAM,EAAKD,QAAQE,SAAS,KAA7C,aAFD,iCAG2BI,KAAKN,QAAQG,MAHxC,IAIC,6BACA,kBAAC,EAAD,W,GAZyBP,IAAMQ,WAA7BC,EAGEE,YAAcZ,EAePU,Q,kOCqEAG,E,2MAjFdC,MAAQ,CACPN,MAAO,G,EAqBRD,SAAW,SAAAQ,GACV,EAAKC,UAAS,SAACC,EAAWC,GACzB,MAAO,CAAEV,MAAOS,EAAUT,MAAQO,O,wEA4BnC,IAAMI,E,yVAAiB,IACnBR,KAAKG,MADc,CAEtBP,SAAUI,KAAKJ,WAGhB,OAEC,kBAAC,EAAUa,SAAX,CAAoBC,MAAOF,GAC1B,0BAAMG,UAAU,OACf,iDAEC,6BAFD,yBAKA,uDACA,4BACC,8DACA,uFACA,oFAGD,wDAA8BX,KAAKG,MAAMN,OACzC,kBAAC,EAAD,Y,GA9EaP,IAAMQ,W,MCFxBc,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.eae7747d.chunk.js","sourcesContent":["import React from 'react';\n\n// use context to create global variables and functions\n// that can be shared with all components\n\n// create a context object\n// will still work if this is empty\n// because replaced with values passed into Provider (see App.js)\nconst MyContext = React.createContext({});\n\n// don't have to do:\n// const MyContext = React.createContext({\n// \tcount: 0,\n// \tsetCount: () => {}\n// });\n\nexport default MyContext;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nclass GrandchildComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t// if you don't want to use static you can wrap the child component in MyContext.Consumer:\n\t\t\t<MyContext.Consumer>\n\t\t\t\t{context => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>GrandhildComponent</h2>\n\t\t\t\t\t\t<button onClick={() => context.setCount(5)}>Count + 5</button> See\n\t\t\t\t\t\tCount in GrandchildComponent ({context.count})\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</MyContext.Consumer>\n\t\t);\n\t}\n}\n\nexport default GrandchildComponent;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nimport GrandchildComponent from './GrandchildComponent';\n\nclass ChildComponent extends React.Component {\n\t// using static, allows you to do this.context... further down\n\t// ex. this.context.count\n\tstatic contextType = MyContext;\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>ChildComponent</h2>\n\t\t\t\t<button onClick={() => this.context.setCount(1)}>Count + 1</button> See\n\t\t\t\tCount in ChildComponent ({this.context.count})\n\t\t\t\t<br />\n\t\t\t\t<GrandchildComponent />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ChildComponent;\n","import React from 'react';\nimport './App.css';\n\nimport MyContext from './MyContext';\n\nimport ChildComponent from './ChildComponent';\n\nclass App extends React.Component {\n\t// in this example, App = my Provider - where I define state\n\t// Provider = holds and provides state\n\n\tstate = {\n\t\tcount: 0 // default state 'count' variable value\n\t};\n\n\t/*\n\tFrom the React documentation: Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.\n\n\tMeaning: updates to the DOM don’t happen immediately when this.setState is called.\n\n\tSo, since  we shouldn’t rely on this.state to calculate the next value, instead of passing in an object to this.setState, pass in a function\n\n\tDo NOT do:\n\tthis.setState({\n\t\tcount: this.state.count + num };\n\t});\n\n\n\tInstead, use the component's current state (prevState), existing before user invoked this function + 'num' value passed to this function in Child and Grandchild components\n\n\tNote: props = current component props, NOT function arguments\n\t*/\n\n\tsetCount = num => {\n\t\tthis.setState((prevState, props) => {\n\t\t\treturn { count: prevState.count + num };\n\t\t});\n\t};\n\n\t/*\n\tfrom https://reactjs.org/docs/context.html:\n\n\t\tContext.Provider\n\n\t\t Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes\n\n\t\t Accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n\n\t\t All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component bails out of the update.\n\t\t*/\n\n\t// create a component state object to update the values stored in MyContext\n\t// pass in any variables and functions you want access to in child components (aka Consumers)\n\t// pass in both the state variables AND the functions which change them\n\n\trender() {\n\t\t// QUESTION: outside the render() this.state = initial values???\n\n\t\t// render is called every time the state changes & causes the ui to refresh/update\n\n\t\t// because I want to update STATE from child components\n\t\t// pass in the rendered state\n\t\t// this will NOT work if componentStateObj is defined outside the render()\n\t\tconst componentStateObj = {\n\t\t\t...this.state, // pass in all state variables\n\t\t\tsetCount: this.setCount\n\t\t};\n\n\t\treturn (\n\t\t\t// use Provider to pass this component state as a context value down to the entire component tree\n\t\t\t<MyContext.Provider value={componentStateObj}>\n\t\t\t\t<main className=\"App\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tReact Context Demo\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\twith Class Components\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p>To use context you need:</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>a state object (in a provider)</li>\n\t\t\t\t\t\t<li>a way to change your state object from your consumer(s)</li>\n\t\t\t\t\t\t<li>a way to communicate state changes to your provider</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<div>The count (in state) is {this.state.count}</div>\n\t\t\t\t\t<ChildComponent />\n\t\t\t\t</main>\n\t\t\t</MyContext.Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}