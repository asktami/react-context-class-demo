{"version":3,"sources":["MyContext.js","GrandchildComponent.js","ChildComponent.js","App.js","index.js"],"names":["MyContext","React","createContext","count","setCount","GrandchildComponent","Consumer","context","onClick","Component","ChildComponent","childCount","this","console","log","contextType","App","state","num","result","setState","componentStateObj","Provider","value","className","ReactDOM","render","document","getElementById"],"mappings":"2PAWeA,G,MALGC,IAAMC,cAAc,CACrCC,MAAO,GACPC,SAAU,gBCcIC,E,iLAjBb,OAEC,kBAAC,EAAUC,SAAX,MACE,SAAAC,GAAO,OACP,6BACC,kDACA,4BAAQC,QAAS,kBAAMD,EAAQH,SAASG,EAAQJ,MAAQ,KAAxD,aAEU,IAJX,qCAKoCI,EAAQJ,MAL5C,Y,GAN6BF,IAAMQ,WCElCC,E,iLAKK,IAAD,OACJC,EAAaC,KAAKL,QAAQJ,MAG9B,OAFAU,QAAQC,IAAI,8BAA+BH,GAG1C,6BACC,8CACA,4BAAQH,QAAS,kBAAM,EAAKD,QAAQH,SAAS,EAAKG,QAAQJ,MAAQ,KAAlE,aAEU,IAJX,gCAK+BS,KAAKL,QAAQJ,MAL5C,IAMC,6BACA,kBAAC,EAAD,W,GAjByBF,IAAMQ,WAA7BC,EAEEK,YAAcf,EAqBPU,QCmDAM,E,2MAlEdC,MAAQ,CACPd,MAAO,G,EAGRC,SAAW,SAAAc,GACVL,QAAQC,IAAI,0BAA2B,EAAKG,MAAMd,OAGlDU,QAAQC,IAAI,sBAAuBI,GAEnC,IAAIC,EAAS,EAAKF,MAAMd,MAAQe,EAEhCL,QAAQC,IAAI,YAAaK,GAEzB,EAAKC,SAAS,CAAEjB,MAAOgB,K,EAsBxBE,kBAAoB,CACnBlB,MAAO,EAAKc,MAAMd,MAClBC,SAAU,EAAKA,U,wEAIf,OAEC,kBAAC,EAAUkB,SAAX,CAAoBC,MAAOX,KAAKS,mBAC/B,0BAAMG,UAAU,OACf,iDAEC,6BAFD,yBAKA,uDACA,4BACC,8DACA,uFACA,oFAGD,wDAA8BZ,KAAKK,MAAMd,OACzC,kBAAC,EAAD,Y,GAjEaF,IAAMQ,W,MCFxBgB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.6c1a082b.chunk.js","sourcesContent":["import React from 'react';\n\n// use context to create global variables and functions\n// that can be shared with all components\n\n// create a context object\nconst MyContext = React.createContext({\n\tcount: '',\n\tsetCount: () => {}\n});\n\nexport default MyContext;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nclass GrandchildComponent extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t// if you don't want to use static you can wrap the child component in MyContext.Consumer:\n\t\t\t<MyContext.Consumer>\n\t\t\t\t{context => (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2>GrandhildComponent</h2>\n\t\t\t\t\t\t<button onClick={() => context.setCount(context.count + 1)}>\n\t\t\t\t\t\t\tCount + 1\n\t\t\t\t\t\t</button>{' '}\n\t\t\t\t\t\tSee Count in GrandchildComponent ({context.count})\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</MyContext.Consumer>\n\t\t);\n\t}\n}\n\nexport default GrandchildComponent;\n","import React from 'react';\nimport MyContext from './MyContext';\n\nimport GrandchildComponent from './GrandchildComponent';\n\nclass ChildComponent extends React.Component {\n\t// using static\n\tstatic contextType = MyContext;\n\n\t// QUESTION WHY is this.context.count NOT the value in context??? instead it is ALWAYS 0 inside this component (same for Grandchild)\n\trender() {\n\t\tlet childCount = this.context.count;\n\t\tconsole.log('Child this.context.count = ', childCount);\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h2>ChildComponent</h2>\n\t\t\t\t<button onClick={() => this.context.setCount(this.context.count + 1)}>\n\t\t\t\t\tCount + 1\n\t\t\t\t</button>{' '}\n\t\t\t\tSee Count in ChildComponent ({this.context.count})\n\t\t\t\t<br />\n\t\t\t\t<GrandchildComponent />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ChildComponent;\n","import React from 'react';\nimport './App.css';\n\nimport MyContext from './MyContext';\n\nimport ChildComponent from './ChildComponent';\n\nclass App extends React.Component {\n\t// in this example, App = my Provider - where I define state\n\t// Provider = holds and provides state\n\n\t// setting default state 'count' variable value\n\t// setCount is the updater function to change the state 'count' variable value\n\tstate = {\n\t\tcount: 0\n\t};\n\n\tsetCount = num => {\n\t\tconsole.log('APP this.state.count = ', this.state.count);\n\n\t\t// QUESTION - why is NUM always 1???\n\t\tconsole.log('APP setCount num = ', num);\n\n\t\tlet result = this.state.count + num;\n\n\t\tconsole.log('result = ', result);\n\n\t\tthis.setState({ count: result });\n\n\t\t// this.setState(prevState => {\n\t\t// \treturn { count: prevState.count + 1 };\n\t\t// });\n\t};\n\n\t/*\n\tfrom https://reactjs.org/docs/context.html:\n\n\t\tContext.Provider\n\n\t\t Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes\n\n\t\t Accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n\n\t\t All consumers that are descendants of a Provider will re-render whenever the Providerâ€™s value prop changes. The propagation from Provider to its descendant consumers is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component bails out of the update.\n\t\t*/\n\n\t// create a component state object to update the values stored in MyContext\n\t// pass in any variables and functions you want access to in child components (aka Consumers)\n\t// pass in both the state variables AND the functions which change them\n\tcomponentStateObj = {\n\t\tcount: this.state.count,\n\t\tsetCount: this.setCount\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t// use Provider to pass this component state as a context value down to the entire component tree\n\t\t\t<MyContext.Provider value={this.componentStateObj}>\n\t\t\t\t<main className=\"App\">\n\t\t\t\t\t<h1>\n\t\t\t\t\t\tReact Context Demo\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\twith Class Components\n\t\t\t\t\t</h1>\n\t\t\t\t\t<p>To use context you need:</p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>a state object (in a provider)</li>\n\t\t\t\t\t\t<li>a way to change your state object from your consumer(s)</li>\n\t\t\t\t\t\t<li>a way to communicate state changes to your provider</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\t<div>The count (in state) is {this.state.count}</div>\n\t\t\t\t\t<ChildComponent />\n\t\t\t\t</main>\n\t\t\t</MyContext.Provider>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}